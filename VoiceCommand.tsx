// VoiceCommand.tsx
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Alert } from 'react-native';
import Voice from '@react-native-voice/voice';
import * as Speech from 'expo-speech';
import { useRouter } from 'expo-router';

export default function VoiceCommand() {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState('');
  const router = useRouter();

  useEffect(() => {
    Voice.onSpeechResults = (event) => {
      const text = event.value?.[0] || '';
      setTranscript(text);
      handleCommand(text.toLowerCase());
    };

    return () => {
      Voice.destroy().then(Voice.removeAllListeners);
    };
  }, []);

  const startListening = async () => {
    try {
      setTranscript('');
      setIsListening(true);
      await Voice.start('kk-KZ'); // “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ
    } catch (e) {
      console.error(e);
      Alert.alert('“ö–∞—Ç–µ!', '–ú–∏–∫—Ä–æ—Ñ–æ–Ω–¥—ã “õ–æ–ª–¥–∞–Ω—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å');
    }
  };

  const stopListening = async () => {
    try {
      await Voice.stop();
      setIsListening(false);
    } catch (e) {
      console.error(e);
    }
  };

  const handleCommand = (command: string) => {
    let found = false;
    if (command.includes('–±–∞—Å—Ç—ã –±–µ—Ç')) {
      router.push('/home');
      found = true;
    } else if (command.includes('—Ç–∞–ø—Å—ã—Ä–º–∞ “õ–æ—Å')) {
      router.push('/add-task');
      found = true;
    } else if (command.includes('–±–∞—Ä–ª—ã“õ —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä')) {
      router.push('/all-tasks');
      found = true;
    } else if (command.includes('“õ–∞—Ä–∂—ã–ª—ã“õ –∫”©–º–µ–∫—à—ñ')) {
      router.push('/finance-dashboard');
      found = true;
    } else if (command.includes('–∞—É–¥–∞—Ä–º–∞')) {
      router.push('/translator');
      found = true;
    } else if (command.includes('–¥–∂–∞—Ä–≤–∏—Å') || command.includes('jarvis')) {
      router.push('/chat');
      found = true;
    } else if (command.includes('–ø—Ä–æ—Ñ–∏–ª—å')) {
      router.push('/profile');
      found = true;
    }

    if (found) {
      Speech.speak('–ë–µ—Ç –∞—à—ã–ª–¥—ã', { language: 'kk-KZ' });
    } else {
      Speech.speak('–ë“±–π—Ä—ã“õ —Ç–∞–±—ã–ª–º–∞–¥—ã', { language: 'kk-KZ' });
    }
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.button} onPress={isListening ? stopListening : startListening}>
        <Text style={styles.buttonText}>{isListening ? 'üõë –¢–æ“õ—Ç–∞—Ç—É' : 'üéô –î–∞—É—ã—Å—Ç—ã“õ –±–∞—Å“õ–∞—Ä—É'}</Text>
      </TouchableOpacity>
      <Text style={styles.transcript}>{transcript}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    marginTop: 40,
    alignItems: 'center',
    padding: 20,
  },
  button: {
    borderColor: '#9C6BFF',
    borderWidth: 2,
    borderRadius: 12,
    paddingVertical: 12,
    paddingHorizontal: 24,
    marginBottom: 20,
  },
  buttonText: {
    color: '#9C6BFF',
    fontWeight: 'bold',
    fontSize: 16,
  },
  transcript: {
    color: '#ccc',
    fontSize: 14,
    textAlign: 'center',
  },
});
